spring-cloud-gateway:
#  hostport: httpbin.org:80
#  hostport: localhost:5000
#  uri: http://${test.hostport}
server:
  port: 9009
spring:
  application:
    name: spring-cloud-gateway
  jmx:
    enabled: false
  cloud:
    nacos:
      discovery:
        # 配置 nacos 的服务地址
        server-addr: localhost:8848
        enabled: true
      config:
        # nacos 配置服务的地址，后面的端口不能省，即使是80端口
        server-addr: localhost:8848
        # 加载 dataid 配置文件的后缀，默认是 properties
        file-extension: yaml
        # 配置组，默认就是 DEFAULT_GROUP
        group: DEFAULT_GROUP
        # 配置命名空间，此处写的是 命名空间的id 的值，默认是 public 命名空间
        namespace: public
        timeout: 5000
        data-id: spring-cloud-gateway.yaml # 需要去nacos中查看dataid，这个配置的是dataid中显示的不带后缀找不到
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes: # 网关路由配置
        - id: cookie_route
          uri: http://localhost:9009
          predicates:
            - Cookie=chocolate, ch.p
        - id: spring-cloud-producer # 路由id，V自定义，只要唯一即可
          # uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址
          uri: lb://spring-cloud-producer # 路由的目标地址 lb就是负载均衡，后面跟服务名称
          filters:
            - StripPrefix=1 # 跳过前缀
            - AddRequestParameter=test,raintest
            - AddRequestHeader=X-Request-Foo, Bar-rrrr
          predicates: # 路由断言，也就是判断请求是否符合路由规则的条件
            - Path=/spring-cloud-producer/** # 这个是按照路径匹配，只要以/user/开头就符合要求
        - id: service-ribbon # 路由id，自定义，只要唯一即可
          uri: lb://service-ribbon # 路由的目标地址 lb就是负载均衡，后面跟服务名称
          filters:
            - StripPrefix=1 # 跳过前缀
          predicates: # 路由断言，也就是判断请求是否符合路由规则的条件
            - Path=/service-ribbon/** # 这个是按照路径匹配，只要以/user/开头就符合要求
        - id: service-ribbon2 # 路由id，自定义，只要唯一即可
          uri: lb://service-ribbon # 路由的目标地址 lb就是负载均衡，后面跟服务名称
          filters:
            - StripPrefix=1 # 跳过前缀
          predicates: # 路由断言，也就是判断请求是否符合路由规则的条件
            - Path=/service-ribbon2/** # 这个是按照路径匹配，只要以/user/开头就符合要求

logging:
  level:
    org.springframework.cloud.gateway: TRACE
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.ipc.netty: DEBUG
    reactor.netty: DEBUG

management.endpoints.web.exposure.include: '*'